Result format:

status = "success" | "fail"
    on bad, the client should refresh the page
result = any data that the operation generated
sequence = the next value to call wait(n) with.  The next sequence the client should expect to see.
log = 

RPCs:

create_game(userid)
    - Advertises a game to people
        - RETURNS: success or failure, conditionally the game id + log(gameid,0)
    - Remain in lobby on client side, maybe?

    RETURNS (success):
    {
        status: "success",
        result: 201
        sequence: 1
        log: [
            { name: "joined", args: ["Josh", 201] }
        ]
    }

    RETURNS (fail):
    {
        status: "fail"
    }

wait(userid, gameid, seqno):
    - Long poll
    - Gets the logs of actions that have occured on the server that are >= sequence number n

    RETURNS:
    {
        sequence: 45
        log: [
            { name: "joined", args: ["John", 205] }
        ]
    }

join_game()
    - Joins in on an advertised game
    - Remain in lobby until start_game
    - PREREQ: logged in
    - LOG EVENT: joined (name, userid)
    - RETURNS: log from 0

    RETURNS (success):
    {
        status: success
        sequence: 50
        log: [
            { name: "joined", args: ["John", 201"],
            { name: "joined", args: ["John", 205"]
        ]
    }

    RETURNS (fail):
    {
        status: fail
    }

start_game(userid, gameid, seqno)
    - Allocates terrain hexes
        - LOG EVENT: hexes_placed [(1, 1) ..... ]
        - LOG EVENT: setup_started (userid)
        - RETURNS: the log from seqno
    - Redirect to game page
    
    {
        status: success
        sequence: 221
        log: [
            { name: "game_started", args: [[1, 1], [2, 5], ...]}
        ]
    }

BUYING/BUILDING:

build_settlement(position)
    - Places a settlment on the game board
    - RETURNS: boolean, the log
    - LOG EVENT: settlement_built
    
upgrade_settlement(position):
 * - Changes an existing settlement into a city
 * - RETURNS: boolean, the log
 * - LOG EVENT settlement_upgraded
 * 
development_card(userid)
 * - //TODO: RAFAEL
 * - Check if largest army
 * - Gives a development card to userid
 * - RETURNS: boolean, the log
 * - LOG EVENT: devcard_bought

build_road(position)
    - Places a road on the game board
    - Check if longest road
    - PREREQS: in game
    - RETURNS: boolean, the log
    - LOG EVENT: road_built

move_robber(position)
    - Moves the robber on the game board
    - PREREQS : in game
    - RETURNS: boolean, the log
    - LOG EVENT: robber_moved
    
discard_cards([(cardtype, quantity)])
    - discards cards specified
    - RETURNS: boolean, the log
    - LOG EVENT: cards_discarded

offer_trade...
    - LOG EVENT: trade_offered


Private data:
    - Development cards

Log Events:

RPC: (These log events have a 1:1 coorespondence with RPCs)
    - joined
    - development_card_bought
    - development_card_played
    - settlement_built
    - settlement_upgraded
    - road_built
    - robber_moved
    - trade_offered
    - cards_discarded

    
Non-RPC:
    - got_achievement
        - Longest Road
        - Largest Army
    - hexes_placed
    - setup_started
    - setup_finished
    - your_turn
        Notifies the user that it is their turn to act.  The user must play according to the contextually correct game rules.

